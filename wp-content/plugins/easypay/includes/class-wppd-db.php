<?php

/**
 * 	EasyPay DB Class
 * 	
 * 	This class will handle all the DataBase operations of the plugin
 * 
 */

Class WPPD_DB {

    // Constructor of the class
    function __construct() {

        // anything here would execute on instanciation the class
    }

    /** -----------------------------------------------------*
     * 	Function to insert value before payment
     * 	
     * 	@param1  $payment_fields		(array) 		Default paypal fields apart from custom fields generated by "Form builder"
     * 	@param2	 $custom_fields     (array)			custom fields generated by "Form builder"
     * 	@param3  $hash				(String)		custom security code for transaction
     * 
     * 	@return  $insert_id  (int)	Insert ID of DB table  
     * ----------------------------------------------------- */
    function wppd_insert_payment_info($payment_fields, $custom_fields, $hash) {

        global $wpdb;
        global $wppd_gateway;
        $easypay_stripe_currency = isset($this->easypay_options['easypay_pay_currency']) ? stripslashes($this->easypay_options['easypay_pay_currency']) : 'USD';
        

        $txnid = '';
        $payment_amount = $payment_fields['amount'];
        $actual_amount = $payment_fields['actualamount'];
        $payment_status = __('Initiated', 'easypay');
        if(!empty($payment_fields['item_name'])):
            $itemid = $payment_fields['item_name'];
         else:
            $itemid = get_the_title($custom_fields['itemname']);
         endif;
         
         if(!empty($payment_fields['currency_code'])):
         $easyCurrency = $payment_fields['currency_code'];
         else:
         $easyCurrency = $easypay_stripe_currency;
         endif;
         
        $createdtime = date('Y-m-d H:i:s');
        $email = $payment_fields['email'];
        $itemID = $custom_fields['itemname'];

        // get paypal fees
        $wppd_options = get_option('easypay_options');
        if ($wppd_gateway->gateway_name == 'PayPal Pro') {
            $easypay_paypal_fee = isset($wppd_options['pro_settings']['easypay_pro_fee']) ? $wppd_options['pro_settings']['easypay_pro_fee'] : '2.90';
        } elseif ($wppd_gateway->gateway_name == 'PayPal Pro') {
            $easypay_paypal_fee = isset($wppd_options['easypay_paypal_fee']) ? $wppd_options['easypay_paypal_fee'] : '2.90';
        }
        else{
             $easypay_paypal_fee = isset($wppd_options['easypay_paypal_fee']) ? $wppd_options['easypay_paypal_fee'] : '2.90';
        }
        $custom = serialize($custom_fields);

        $custom = addslashes($custom);

        // Inserting data to DB
        $table_name = $wpdb->prefix . 'easypay_payment_log';
        $wpdb->insert(
                $table_name, array(
            'payment_amount' => $payment_amount,
            'payment_actual_amount' => $actual_amount,
            'payment_fees_rate' => $easypay_paypal_fee,
            'payment_currency' => $easyCurrency,
            'payment_gateway' => $wppd_gateway->gateway_name,
            'payment_status' => $payment_status,
            'itemid' => $itemid,
            'createdtime' => $createdtime,
            'itemname' => $itemID,
            'email' => $email,
            'hash' => $hash,
            'custom' => $custom,
                )
        );

        $insert_id = $wpdb->insert_id;
        return $insert_id;
    }

    /**
     * Function to update payment info after payments
     * 
     * @global object $wpdb
     * @param array $post $_POST
     * @param int $row_id_txn
     * @param string $has_txn
     * @return int
     */
    function wppd_update_payment_info($post, $row_id_txn, $has_txn) {

        global $wpdb;

        $txnid = $post['txn_id'];
        $payment_status = $post['payment_status'];
        
        
        $transaction_info = serialize($post);
        $transaction_info = addslashes($transaction_info);


        $table_name = $wpdb->prefix . 'easypay_payment_log';


        $is_updated = $wpdb->update(
                $table_name, array(
            'txnid' => $txnid,
            'payment_status' => $payment_status,
            'transaction_info' => $transaction_info
                ), array('id' => $row_id_txn), array('%s', '%s', '%s'), array('%d', '%s')
        );

        return $is_updated;
    }
    
    function unsetCredentail($post){
    	unset($post['card_holder_name']);
    	unset($post['card_number']);
    	unset($post['expiry_month']);
    	unset($post['expiry_year']);
    	unset($post['cvv']);
    	unset($post['action']);
    	 
    	return $post;
    }
    /**
     * Function to update payment info after payments
     *
     * @global object $wpdb
     * @param array $post $_POST
     * @param int $row_id_txn
     * @param string $has_txn
     * @return int
     */
    function wppd_update_stripe_payment_info($post, $row_id_txn) {
    
    	global $wpdb;
    	$txnid = $post['id'];
    	if($post['status'] == 'succeeded'):
    	  $payment_status = 'Completed';
    	else:
    	  $payment_status = 'Initiated';
    	endif;
    	
    	
    	//print_r($post);
    	//print_r($post::all());
    	//exit;
    	
    	//$post=$this->unsetCredentail($post); // unset credetial data

    	$transaction_info = serialize($post);
    	$transaction_info = addslashes($transaction_info);
    
    	$table_name = $wpdb->prefix . 'easypay_payment_log';
    	$is_updated=$wpdb->query(
    		$wpdb->prepare("
    			UPDATE $table_name
    			SET 
    					txnid = '%s',
    					payment_status = '%s',
    					transaction_info = '%s'
    			
    			WHERE ID = '%d'
    			", $txnid, $payment_status, $transaction_info, $row_id_txn
    		));
    	
    	
    	 
    	/*
    	$is_updated=$wpdb->query(
    			"
    			UPDATE $table_name
    			SET 
    					txnid = '$txnid',
    					payment_status = '$payment_status',
    					transaction_info = '$transaction_info'
    			
    			WHERE ID = '$row_id_txn'
    			"
    	);
    	 * $is_updated = $wpdb->update(
    			$table_name, array(
    					'txnid' => $txnid,
    					'payment_status' => $payment_status,
    					'transaction_info' => $transaction_info
    			), array('id' => $row_id_txn), array('%s', '%s', '%s'), array('%d', '%s')
    	);*/
    	
    	/*echo "<pre>";
    	print_r($wpdb->queries);
    	echo "</pre>";
    	echo $wpdb->last_query;
    	exit;
    */
    	return $is_updated;
    }
    
    function wppd_get_payment_info($payment_id) {

        global $wpdb;
        $query = "SELECT * FROM {$wpdb->prefix}easypay_payment_log WHERE id = " . $payment_id;
        $payment_info = $wpdb->get_row($query, ARRAY_A);
        return $payment_info;
    }

}
